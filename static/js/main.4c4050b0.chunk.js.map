{"version":3,"sources":["../node_modules/@trust/webcrypto/src/algorithms sync","services/fetchProfile.ts","services/fetchPublicTypeIndex.ts","services/FileUtils.ts","services/CouchDb.ts","services/MetaUtils.ts","services/addNote.ts","hooks/useNotesList.ts","hooks/usePublicTypeIndex.ts","components/Note.tsx","components/NotesList.tsx","components/Dashboard.tsx","components/PodConnecter.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","fetchProfile","_fetchProfile","apply","this","arguments","_callee","currentSession","webIdDoc","profile","regenerator_default","a","wrap","_context","prev","next","solidAuth","sent","abrupt","fetchDocument","webId","getSubject","stop","fetchPublicTypeIndex","_fetchPublicTypeIndex","publicTypeIndexUrl","document","getRef","solid","publicTypeIndex","FileClient","require","FileUtils","Promise","all","root","space","storage","undefined","substring","length","slice","getRoot","shoutboxFolder","notesFolderRef","readFolder","then","createFolder","url","startsWith","res","readFile","body","err","console","log","concat","createFile","newContent","updateFile","CouchDb","couchDbBaseUrl","executeQueryonCouch","_this","reject","xhr","CreateRequest","onload","status","JSON","parse","response","rows","statusText","onerror","send","meta","createIdFromMeta","alert","stringify","method","XMLHttpRequest","open","setRequestHeader","reg","RegExp","hostName","pathName","replace","couchDbServerUrl","couchDbDatabaseName","MetaUtils","metaIndexFilePath","tagDir","tagFileName","notesListRef","URL","hostname","pathname","mimeType","creationDate","Date","tags","tagType","value","published","getAllLocalMetas","allLocalMetas","filter","el","push","getMetaIndexFilePath","writeMeta","allMetas","readFileAsString","json","getShoutBoxMetas","addNote","_x","_x2","_addNote","note","notesList","path","newNote","newNoteSubject","checkNotesFolder","t0","Math","floor","now","createDocument","addSubject","addRef","rdf","type","schema","TextDigitalDocument","addLiteral","text","dateCreated","save","asRef","createMeta","useNotesList","_React$useState","React","useState","_React$useState2","Object","slicedToArray","setPublicTypeIndex","useEffect","fetchedPublicTypeIndex","usePublicTypeIndex","setNotesList","asyncToGenerator","mark","centralMetas","notes","i","getCentralMetas","sectionStyle","padding","backgroundColor","Note","props","isEditing","setIsEditing","_React$useState3","_React$useState4","isSubmitting","setIsSubmitting","_React$useState5","getString","_React$useState6","setNote","_React$useState7","_React$useState8","formContent","setFormContent","saveNote","_ref","event","updatedNote","preventDefault","onChange","isLoading","react_default","createElement","Fragment","onSubmit","className","target","name","disabled","onClick","role","style","cursor","react_markdown_default","source","noteStyle","overflow","height","marginTop","paddingTop","NotesList","updatedNotesList","setUpdatedNotesList","_saveNote","updatedDoc","_editNote","_callee2","content","_context2","noteElements","subjectsList","forEach","getSubjectsOfType","getNotes","map","key","split","Note_Note","updatedContent","_x3","editNote","obj","getElementById","setTimeout","scrollTop","scrollHeight","scrollToBottom","container","maxWidth","footer","Dashboard","fontSize","NotesList_NotesList","lib","suggestedWebId","URLSearchParams","location","search","get","PodConnecter","chosenWebId","setWebId","SolidAuth","login","htmlFor","popup","App","StrictMode","PodConnecter_PodConnecter","Dashboard_Dashboard","Boolean","window","match","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4c4050b0.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 889;","import solidAuth from 'solid-auth-client';\r\nimport { fetchDocument } from 'tripledoc';\r\n\r\nexport async function fetchProfile () {\r\n  const currentSession = await solidAuth.currentSession();\r\n  if (!currentSession) {\r\n    return null;\r\n  }\r\n\r\n  const webIdDoc = await fetchDocument(currentSession.webId);\r\n  const profile = webIdDoc.getSubject(currentSession.webId);\r\n  return profile;\r\n}\r\n","import { fetchProfile } from './fetchProfile';\r\nimport { fetchDocument } from 'tripledoc';\r\nimport { solid } from 'rdf-namespaces';\r\n\r\nexport async function fetchPublicTypeIndex () {\r\n  const profile = await fetchProfile();\r\n  if (profile === null) {\r\n    return null;\r\n  }\r\n\r\n  const publicTypeIndexUrl = profile.getRef(solid.publicTypeIndex);\r\n  if (!publicTypeIndexUrl || typeof publicTypeIndexUrl !== 'string') {\r\n    return null;\r\n  }\r\n\r\n  const document = await fetchDocument(publicTypeIndexUrl);\r\n  return document;\r\n}\r\n","import { fetchProfile } from './fetchProfile';\r\nimport { space } from 'rdf-namespaces';\r\nimport { fetchPublicTypeIndex } from './fetchPublicTypeIndex';\r\nconst FileClient = require('solid-file-client');\r\n\r\nexport interface IFolder {\r\n    type: \"folder\";\r\n    name: string; // folder name (without path),\r\n    url: string; // full URL of the resource,\r\n    modified: string; // dcterms:modified date\r\n    mtime: string; // stat:mtime\r\n    size: number;// stat:size\r\n    parent: string;// parentFolder or undef if none,\r\n    content: string; // raw content of the folder's turtle representation,\r\n    files: Array<any>; // an array of files in the folder\r\n    folders: IFolder[];// an array of sub-folders in the folder,\r\n    known?: boolean;//details of sub folders are read (in treeview)\r\n}\r\n\r\n\r\nexport default class FileUtils {\r\n\r\n    static shoutboxFolder = '/public/shoutbox'\r\n\r\n    static async getRoot() {\r\n        const [profile, publicTypeIndex] = await Promise.all([fetchProfile(), fetchPublicTypeIndex()]);\r\n        if (profile === null || publicTypeIndex === null) {\r\n            return null;\r\n        }\r\n\r\n        let root = profile.getRef(space.storage);\r\n        if (typeof root !== 'string') {\r\n            return null;\r\n        }\r\n\r\n        if (root && root !== undefined) {\r\n            root = root.substring(root.length - 1, root.length) === \"/\" ? root.slice(0, -1) : root\r\n        }\r\n\r\n        return root\r\n    }\r\n\r\n    static async checkNotesFolder() {\r\n        const notesFolderRef = await this.getRoot() + this.shoutboxFolder;\r\n        FileClient.readFolder(notesFolderRef)\r\n            .then(\r\n                null,\r\n                FileClient.createFolder(notesFolderRef)\r\n            )\r\n    }\r\n\r\n    //Interface method for FileClient.readFile\r\n    static async readFileAsString(url: string) {\r\n        url = url.startsWith('http') ? url : 'https://' + url\r\n        let res: string = ''\r\n        await FileClient.readFile(url).then(\r\n            (body: string) => { res = body }\r\n            , (err: any) => {\r\n                console.log(`Error when reading file ${url}, returning blank`)\r\n            });\r\n        return res as string\r\n    }\r\n\r\n    //Interface method for FileClient.createFile\r\n    static async createFile(url: string) {\r\n        FileClient.createFile(url)\r\n            .then(\r\n                () => { return true }\r\n                , (err: any) => console.log('Error while creating file ' + url)\r\n            )\r\n    }\r\n\r\n    //Interface method for FileClient.updateFile\r\n    static async updateFile(url: string, newContent: string) {\r\n        FileClient.updateFile(url, newContent)\r\n            .then(\r\n                () => { return true }\r\n                , (err: any) => console.log('Error while updating file ' + url)\r\n            )\r\n    }\r\n\r\n    //Interface method for FileClient.createFile\r\n    static async createFileWithContent(url: string, newContent: string) {\r\n        FileClient.createFile(url)\r\n            .then(\r\n                FileClient.updateFile(url, newContent)\r\n                    .then(\r\n                        () => { return true }\r\n                        , (err: any) => console.log('Error while updating file ' + url)\r\n                    )\r\n                , (err: any) => console.log('Error while creating file ' + url)\r\n            )\r\n    }\r\n\r\n\r\n}","import { Meta} from './MetaUtils';\r\n\r\ninterface CouchDbRowKeyValue {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\nexport interface FoundTags {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\nexport default class CouchDb {\r\n\r\n  static couchDbServerUrl = `http://91.186.9.6:5984`\r\n  static couchDbDatabaseName = `solid`\r\n  //static couchDbServerUrl = `http://127.0.0.1:5984`\r\n  //static couchDbDatabaseName = `solidfilemanager`\r\n  static couchDbBaseUrl = `${CouchDb.couchDbServerUrl}/${CouchDb.couchDbDatabaseName}`\r\n\r\n  static async getShoutBoxMetas(): Promise<Array<any>> {\r\n       const url = `${this.couchDbBaseUrl}/_design/DesignDoc/_view/MetasByTagsAndDates?startkey=\"appName:shoutbox\"&endkey=\"appName:shoutboxZ\"&descending=false&limit=25`\r\n       console.log(url)\r\n       return await this.executeQueryonCouch(url)\r\n   }\r\n\r\n  static executeQueryonCouch(url: string): Promise<Array<any>> {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = this.CreateRequest('GET', url);\r\n      if (xhr) {\r\n        xhr.onload = () => {\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            let res = JSON.parse(xhr.response)\r\n            resolve(res.rows)\r\n          } else {\r\n            console.log(xhr.statusText)\r\n            reject(xhr.statusText);\r\n          }\r\n        };\r\n        xhr.onerror = () => {\r\n          console.log(xhr.statusText)\r\n          reject(xhr.statusText);\r\n        }\r\n        xhr.send();\r\n      }\r\n    })\r\n  }\r\n\r\n  static writeMeta(meta: Meta) {\r\n    const xhr = this.CreateRequest('PUT', `${this.couchDbBaseUrl}/${this.createIdFromMeta(meta)}`);\r\n    if (xhr) {\r\n      // Response handlers.\r\n      xhr.onload = function () { };\r\n      xhr.onerror = function () {\r\n        alert('Error writing meta in CouchDb.');\r\n      };\r\n      xhr.send(JSON.stringify(meta));\r\n    }\r\n  }\r\n\r\n  // Create the XHR object.\r\n  static CreateRequest(method: string, url: string) {\r\n    let xhr = new XMLHttpRequest();\r\n\r\n    if (\"withCredentials\" in xhr) {\r\n      // XHR for Chrome/Firefox/Opera/Safari.\r\n      xhr.open(method, url, true); //false to be sync\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    } else {\r\n      alert('XMLHttpRequest not supported');\r\n    }\r\n    return xhr;\r\n  }\r\n\r\n  //Create an id replacing '/' of the URI by dots\r\n  static createIdFromMeta(meta: Meta) {\r\n    const reg = new RegExp(\"[/]\", \"g\")\r\n    return (meta.hostName + meta.pathName).replace(reg, '.')\r\n  }\r\n}\r\n","import CouchDb from './CouchDb';\r\nimport FileUtils from './FileUtils';\r\nconst FileClient = require('solid-file-client');\r\n\r\nexport interface MetaTag {\r\n    tagType: string,\r\n    value: string,\r\n    published: boolean\r\n}\r\n\r\nexport interface Meta {\r\n    hostName: string,\r\n    pathName: string,\r\n    mimeType: string,\r\n    creationDate: Date,\r\n    tags: MetaTag[],\r\n    _rev?: string //CouchDb field\r\n}\r\n\r\nexport default class MetaUtils {\r\n    static tagDir = '/public'\r\n    static tagFileName = '_Meta.json'\r\n    static metaIndexFilePath: string\r\n\r\n    static async getMetaIndexFilePath() {\r\n        if (this.metaIndexFilePath === undefined) {\r\n            const root = await FileUtils.getRoot()\r\n            this.metaIndexFilePath = `${root}${MetaUtils.tagDir}/${MetaUtils.tagFileName}`\r\n        }\r\n        return this.metaIndexFilePath\r\n    }\r\n\r\n    static async createMeta(notesListRef: string) {\r\n        const url = new URL(notesListRef)\r\n        let meta = {\r\n            hostName: url.hostname,\r\n            pathName: url.pathname,\r\n            mimeType: 'ttl',\r\n            creationDate: new Date(),\r\n            tags: [\r\n                { tagType: 'AppName', value: 'shoutbox', published: true },\r\n            ]\r\n        } as Meta\r\n\r\n        //FILE: remove old meta from list if exists and add the new one\r\n        let allLocalMetas: Meta[] = await this.getAllLocalMetas() as unknown as Meta[]\r\n        allLocalMetas = allLocalMetas.filter(el => !(el.hostName === meta.hostName && el.pathName === meta.pathName));\r\n        allLocalMetas.push(meta)\r\n        FileClient.updateFile(\r\n            await this.getMetaIndexFilePath(),\r\n            JSON.stringify(allLocalMetas)\r\n        )\r\n\r\n        //COUCHDB:\r\n        CouchDb.writeMeta(meta)\r\n    }\r\n\r\n    //Local storage, read the file and get all metas in it\r\n    static async getAllLocalMetas() {\r\n        let allMetas = [] as Meta[]\r\n        var json: string = await FileUtils.readFileAsString(await this.getMetaIndexFilePath())\r\n        if (json !== '') allMetas = JSON.parse(json)\r\n        return allMetas\r\n    }\r\n\r\n    static async getCentralMetas(): Promise<Array<any>> {\r\n        return await CouchDb.getShoutBoxMetas()\r\n    }\r\n}\r\n","import { rdf, schema } from 'rdf-namespaces';\r\nimport { TripleDocument } from 'tripledoc';\r\nimport { createDocument, fetchDocument } from 'tripledoc';\r\nimport { addToTypeIndex } from './addToTypeIndex';\r\nimport { fetchProfile } from './fetchProfile';\r\nimport { fetchPublicTypeIndex } from './fetchPublicTypeIndex';\r\nimport FileUtils from './FileUtils';\r\nimport MetaUtils from './MetaUtils'\r\n\r\nexport async function addNote(note: string, notesList: TripleDocument[]): Promise<TripleDocument[]> {\r\n\r\n  //TTL file\r\n  FileUtils.checkNotesFolder()\r\n  let root = await FileUtils.getRoot() || ''\r\n  const path = `/public/shoutbox/note${Math.floor(Date.now() / 1000)}.ttl`;\r\n  const notesListRef = `${root}${path}`;\r\n  const newNote = createDocument(notesListRef);\r\n  const newNoteSubject = newNote.addSubject();\r\n  newNoteSubject.addRef(rdf.type, schema.TextDigitalDocument);\r\n  newNoteSubject.addLiteral(schema.text, note);\r\n  newNoteSubject.addLiteral(schema.dateCreated, new Date(Date.now()))\r\n  await newNote.save();\r\n  //reload else asRef is unknown for newNoteSubject\r\n  const document = await fetchDocument(newNote.asRef());\r\n  notesList.push(document)\r\n\r\n  //TTL public index\r\n  /*\r\n  const [profile, publicTypeIndex] = await Promise.all([fetchProfile(), fetchPublicTypeIndex()]);\r\n  if (profile !== null && publicTypeIndex !== null) {\r\n    await addToTypeIndex(publicTypeIndex, newNote, schema.TextDigitalDocument);\r\n  }\r\n  */\r\n  \r\n  //Meta on local and central\r\n  MetaUtils.createMeta(notesListRef)\r\n\r\n  return notesList\r\n}\r\n","import React from 'react';\r\nimport { fetchDocument, createDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\n//import { initialiseNotesList } from '../services/initialiseNotesList';\r\nimport MetaUtils from '../services/MetaUtils'\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument[]>();\r\n\r\n  React.useEffect(() => {\r\n    if (!publicTypeIndex) {\r\n      return;\r\n    }\r\n\r\n    (async () => {\r\n      const centralMetas = await MetaUtils.getCentralMetas() as any[]\r\n      let notes = [] as TripleDocument[]\r\n      for (let i = 0; i < centralMetas.length; i++) {\r\n        let document\r\n        try {\r\n          document = await fetchDocument('https://' + centralMetas[i].value.hostName + centralMetas[i].value.pathName);\r\n        } catch {\r\n          //document was deleted but not the index\r\n          document = createDocument('')\r\n        }\r\n        notes.push(document)\r\n      }\r\n      setNotesList(notes);\r\n    })();\r\n\r\n  }, [publicTypeIndex]);\r\n\r\n  return notesList;\r\n}\r\n\r\nexport function getNotes(notesList: TripleDocument[]): TripleSubject[] {\r\n  let subjectsList = [] as TripleSubject[]\r\n  notesList.forEach((note: TripleDocument) => {\r\n    subjectsList.push(note.getSubjectsOfType(schema.TextDigitalDocument)[0])\r\n  })\r\n  return subjectsList\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport { TripleDocument } from 'tripledoc';\r\nimport { fetchPublicTypeIndex } from '../services/fetchPublicTypeIndex';\r\n\r\nexport function usePublicTypeIndex() {\r\n  const [publicTypeIndex, setPublicTypeIndex] = React.useState<TripleDocument>();\r\n\r\n  React.useEffect(() => {\r\n    fetchPublicTypeIndex().then(fetchedPublicTypeIndex => {\r\n      if (fetchedPublicTypeIndex === null) {\r\n        return;\r\n      }\r\n      setPublicTypeIndex(fetchedPublicTypeIndex);\r\n    });\r\n  }, []);\r\n\r\n  return publicTypeIndex;\r\n}\r\n","import React from 'react';\r\nimport Markdown from 'react-markdown';\r\nimport { TripleSubject } from 'tripledoc';\r\nimport { schema } from 'rdf-namespaces';\r\n\r\ninterface Props {\r\n  note: TripleSubject;\r\n  onChange: (updatedContent: string) => Promise<TripleSubject | undefined>;\r\n};\r\n\r\nconst sectionStyle = {\r\n  padding: '0.5rem 1rem 0.5rem 1rem',\r\n  backgroundColor: 'lightgray'\r\n};\r\n\r\nexport const Note: React.FC<Props> = (props) => {\r\n  const [isEditing, setIsEditing] = React.useState(false);\r\n  const [isSubmitting, setIsSubmitting] = React.useState(false);\r\n  const [note, setNote] = React.useState(props.note.getString(schema.text));\r\n  const [formContent, setFormContent] = React.useState(note || '');\r\n\r\n  const saveNote: React.FormEventHandler = async (event) => {\r\n    event.preventDefault();\r\n\r\n    setIsSubmitting(true);\r\n    const updatedNote = await props.onChange(formContent);\r\n    if (updatedNote) {\r\n      setNote(updatedNote.getString(schema.text));\r\n      // Only stop editing if the note was saved successfully:\r\n      setIsEditing(false);\r\n    }\r\n    setIsSubmitting(false);\r\n  };\r\n\r\n  const cancelEdit: React.MouseEventHandler = (event) => {\r\n    setIsEditing(false);\r\n  };\r\n\r\n  if (isEditing) {\r\n    const isLoading = isSubmitting ? 'is-loading' : '';\r\n\r\n    return <>\r\n      <form onSubmit={saveNote} className=\"content\">\r\n        <div className=\"field\">\r\n          <div className=\"control\">\r\n            <textarea\r\n              onChange={(e) => { e.preventDefault(); setFormContent(e.target.value); }}\r\n              name=\"note\"\r\n              id=\"note\"\r\n              className=\"textarea\"\r\n              value={formContent}\r\n              disabled={isSubmitting}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"field is-grouped\">\r\n          <div className=\"control\">\r\n            <button\r\n              type=\"submit\"\r\n              className={`button is-primary ${isLoading}`}\r\n              disabled={isSubmitting}\r\n            >Save</button>\r\n          </div>\r\n          <div className=\"control\">\r\n            <button onClick={cancelEdit} className=\"button is-text\">\r\n              Cancel\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    </>;\r\n  }\r\n\r\n  return <>\r\n    <article\r\n      className=\"card\"\r\n      role=\"button\"\r\n      style={{cursor: 'pointer'}}\r\n      onClick={() => setIsEditing(true)}\r\n    >\r\n      <div className=\" content\" style={sectionStyle}>\r\n        <Markdown source={note || ''}/>\r\n      </div>\r\n    </article>\r\n  </>;\r\n};\r\n","import React from 'react';\r\nimport { addNote } from '../services/addNote';\r\nimport { getNotes, useNotesList } from '../hooks/useNotesList';\r\nimport { TripleSubject, TripleDocument } from 'tripledoc';\r\nimport { Note } from './Note';\r\n\r\nconst noteStyle = {\r\n  overflow: 'auto',\r\n  height: '59vh',\r\n  padding: '0 20px 0 20px',\r\n  marginTop: '0', \r\n  paddingTop: '0'\r\n};\r\n\r\n\r\nexport const NotesList: React.FC = () => {\r\n  const notesList = useNotesList();\r\n  const [formContent, setFormContent] = React.useState('');\r\n  const [updatedNotesList, setUpdatedNotesList] = React.useState<TripleDocument[]>();\r\n\r\n  if (!notesList) {\r\n    return null;\r\n  }\r\n  const notes = getNotes(updatedNotesList || notesList);\r\n\r\n  //Save note on main textarea\r\n  async function saveNote(event: React.FormEvent) {\r\n    event.preventDefault();\r\n    if (!notesList) {\r\n      return;\r\n    }\r\n    const updatedDoc = await addNote(formContent, notesList);\r\n    setUpdatedNotesList(updatedDoc);\r\n    setFormContent('');\r\n  }\r\n\r\n  function scrollToBottom() {\r\n    const obj = document.getElementById(\"notesContainer\") as HTMLElement;\r\n    if (obj) {\r\n      setTimeout(function () { obj.scrollTop = obj.scrollHeight; }\r\n        , 500);\r\n    }\r\n  }\r\n\r\n  async function editNote(content: string, note: TripleSubject) {\r\n    return note\r\n  }\r\n\r\n  const noteElements = notes.map((note) => (\r\n    note !== undefined\r\n      ? (\r\n        <div key={note.asRef()}>\r\n          {note.asRef().split('/')[2]}\r\n          <Note\r\n            note={note}\r\n            onChange={(updatedContent) => editNote(updatedContent, note)}\r\n          />\r\n        </div>\r\n      ) : (<span></span>)\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <section>\r\n        <div style={noteStyle} id=\"notesContainer\">\r\n          {noteElements}\r\n        </div>\r\n        <br />\r\n        <form onSubmit={saveNote}>\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <textarea\r\n                onChange={(e) => { e.preventDefault(); setFormContent(e.target.value); }}\r\n                name=\"note\"\r\n                id=\"note\"\r\n                className=\"textarea\"\r\n                value={formContent}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <button type=\"submit\" className=\"button is-primary\">Add note</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </section>\r\n      {scrollToBottom()}\r\n    </>\r\n\r\n  );\r\n};\r\n\r\n/*\r\nunused, done in CouchDb\r\nfunction byDate(note1: TripleSubject, note2: TripleSubject): number {\r\n  const date1 = note1.getDateTime(schema.dateCreated);\r\n  const date2 = note2.getDateTime(schema.dateCreated);\r\n  if (!(date1 instanceof Date) || !(date2 instanceof Date)) {\r\n    return 0;\r\n  }\r\n  return date2.getTime() - date1.getTime();\r\n}\r\n*/\r\n","import React from 'react';\r\nimport { LogoutButton } from '@solid/react';\r\nimport { NotesList } from './NotesList';\r\n\r\n\r\nconst container = {\r\n  padding: '0.5rem 1rem 0.5rem 1rem',\r\n  maxWidth: '60%'\r\n}\r\n\r\nconst footer = {\r\n  backgroundColor: '#fafafa',\r\n  padding: '0 1.5rem 0'\r\n};\r\n\r\nexport const Dashboard: React.FC = () => {\r\n  return <>\r\n    <div style={container}>\r\n      <h1 style={{ fontSize: '2rem' }}>\r\n        shoutbox\r\n      </h1>\r\n      <NotesList />\r\n      <footer style={footer}>\r\n        <div className=\"columns\">\r\n          <div className=\"column has-text-right\">\r\n            <LogoutButton className=\"button\" />\r\n          </div>\r\n        </div>\r\n      </footer>\r\n    </div>\r\n  </>;\r\n};\r\n","import React from 'react';\r\nimport { LoginButton } from '@solid/react';\r\nimport SolidAuth from 'solid-auth-client';\r\n\r\nconst suggestedWebId = (URLSearchParams && document.location.search)\r\n  ? (new URLSearchParams(document.location.search)).get('webid')\r\n  : null;\r\n\r\nexport const PodConnecter: React.FC = () => {\r\n  const [chosenWebId, setWebId] = React.useState(suggestedWebId);\r\n\r\n  if (suggestedWebId) {\r\n    const login = () => {\r\n      if (!chosenWebId) {\r\n        return;\r\n      }\r\n\r\n      SolidAuth.login(chosenWebId);\r\n    }\r\n\r\n    return (\r\n      <form onSubmit={(event) => {event.preventDefault(); login(); }}>\r\n        <div className=\"field\">\r\n          <div className=\"control\">\r\n            <label htmlFor=\"webid\" className=\"label\">Your WebID:</label>\r\n            <input\r\n              type=\"url\"\r\n              name=\"webid\"\r\n              id=\"webid\"\r\n              className=\"input is-large\"\r\n              value={chosenWebId || ''}\r\n              onChange={(e) => { e.preventDefault(); setWebId(e.target.value); }}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"field\">\r\n          <div className=\"control\">\r\n            <input type=\"submit\" className=\"button is-primary is-large\" value=\"Connect\"/>\r\n          </div>\r\n        </div>\r\n      </form>\r\n    );\r\n  }\r\n\r\n  return <>\r\n    <LoginButton popup=\"popup.html\" className=\"button is-large is-primary\">Connect</LoginButton>\r\n  </>;\r\n}\r\n","import React from 'react';\r\nimport { LoggedOut, LoggedIn } from '@solid/react';\r\nimport { Dashboard } from './components/Dashboard';\r\nimport { PodConnecter } from './components/PodConnecter';\r\n\r\nconst App: React.FC = () => {\r\n  return <>\r\n    <React.StrictMode>\r\n      <LoggedOut>\r\n        <section className=\"section\">\r\n          <p className=\"content\">Please connect to your Pod to start taking notes.</p>\r\n          <p className=\"content\">\r\n            <PodConnecter/>\r\n          </p>\r\n        </section>\r\n      </LoggedOut>\r\n      <LoggedIn>\r\n        <Dashboard/>\r\n      </LoggedIn>\r\n    </React.StrictMode>\r\n  </>;\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}