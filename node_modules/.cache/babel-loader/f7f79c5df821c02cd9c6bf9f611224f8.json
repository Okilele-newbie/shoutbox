{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\shoutbox\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { fetchProfile } from './fetchProfile';\nimport { space } from 'rdf-namespaces';\nimport { fetchPublicTypeIndex } from './fetchPublicTypeIndex';\n\nconst FileClient = require('solid-file-client');\n\nexport default class FileUtils {\n  static async getRoot() {\n    const _ref = await Promise.all([fetchProfile(), fetchPublicTypeIndex()]),\n          _ref2 = _slicedToArray(_ref, 2),\n          profile = _ref2[0],\n          publicTypeIndex = _ref2[1];\n\n    if (profile === null || publicTypeIndex === null) {\n      return null;\n    }\n\n    let root = profile.getRef(space.storage);\n\n    if (typeof root !== 'string') {\n      return null;\n    }\n\n    if (root !== undefined) root = root.substring(root.length - 1, root.length) === \"/\" ? root.slice(0, -1) : root;\n    return root;\n  }\n\n  static async checkNotesFolder() {\n    const notesFolderRef = (await this.getRoot()) + 'public/notepod';\n    FileClient.readFolder(notesFolderRef).then(null, FileClient.createFolder(notesFolderRef));\n  } //Interface method for FileClient.readFile\n\n\n  static async readFileAsString(url) {\n    url = url.startsWith('http') ? url : 'https://' + url;\n    let res = '';\n    await FileClient.readFile(url).then(body => {\n      res = body;\n    }, err => {\n      console.log(\"Error when reading file \".concat(url, \", returning blank\"));\n    });\n    return res;\n  }\n\n}","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\services\\FileUtils.ts"],"names":["fetchProfile","space","fetchPublicTypeIndex","FileClient","require","FileUtils","getRoot","Promise","all","profile","publicTypeIndex","root","getRef","storage","undefined","substring","length","slice","checkNotesFolder","notesFolderRef","readFolder","then","createFolder","readFileAsString","url","startsWith","res","readFile","body","err","console","log"],"mappings":";AAAA,SAASA,YAAT,QAA6B,gBAA7B;AACA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,oBAAT,QAAqC,wBAArC;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAA1B;;AAgBA,eAAe,MAAMC,SAAN,CAAgB;AAE3B,eAAaC,OAAb,GAAuB;AAAA,iBACgB,MAAMC,OAAO,CAACC,GAAR,CAAY,CAACR,YAAY,EAAb,EAAiBE,oBAAoB,EAArC,CAAZ,CADtB;AAAA;AAAA,UACZO,OADY;AAAA,UACHC,eADG;;AAEnB,QAAID,OAAO,KAAK,IAAZ,IAAoBC,eAAe,KAAK,IAA5C,EAAkD;AAC9C,aAAO,IAAP;AACH;;AAED,QAAIC,IAAI,GAAGF,OAAO,CAACG,MAAR,CAAeX,KAAK,CAACY,OAArB,CAAX;;AACA,QAAI,OAAOF,IAAP,KAAgB,QAApB,EAA8B;AAC1B,aAAO,IAAP;AACH;;AAED,QAAIA,IAAI,KAAKG,SAAb,EACIH,IAAI,GAAGA,IAAI,CAACI,SAAL,CAAeJ,IAAI,CAACK,MAAL,GAAc,CAA7B,EAAgCL,IAAI,CAACK,MAArC,MAAiD,GAAjD,GAAuDL,IAAI,CAACM,KAAL,CAAW,CAAX,EAAc,CAAC,CAAf,CAAvD,GAA2EN,IAAlF;AAEJ,WAAOA,IAAP;AACH;;AAED,eAAaO,gBAAb,GAAiC;AAC7B,UAAMC,cAAc,GAAG,OAAM,KAAKb,OAAL,EAAN,IAAuB,gBAA9C;AACAH,IAAAA,UAAU,CAACiB,UAAX,CAAsBD,cAAtB,EACCE,IADD,CAEI,IAFJ,EAGIlB,UAAU,CAACmB,YAAX,CAAwBH,cAAxB,CAHJ;AAKD,GA1BwB,CA4B3B;;;AACA,eAAaI,gBAAb,CAA8BC,GAA9B,EAA2C;AACvCA,IAAAA,GAAG,GAAGA,GAAG,CAACC,UAAJ,CAAe,MAAf,IAAyBD,GAAzB,GAA+B,aAAaA,GAAlD;AACA,QAAIE,GAAW,GAAG,EAAlB;AACA,UAAMvB,UAAU,CAACwB,QAAX,CAAoBH,GAApB,EAAyBH,IAAzB,CACDO,IAAD,IAAkB;AAACF,MAAAA,GAAG,GAAGE,IAAN;AAAY,KAD7B,EAECC,GAAD,IAAc;AACZC,MAAAA,OAAO,CAACC,GAAR,mCAAuCP,GAAvC;AACH,KAJC,CAAN;AAKA,WAAOE,GAAP;AACH;;AAtC0B","sourcesContent":["import { fetchProfile } from './fetchProfile';\r\nimport { space } from 'rdf-namespaces';\r\nimport { fetchPublicTypeIndex } from './fetchPublicTypeIndex';\r\nconst FileClient = require('solid-file-client');\r\n\r\nexport interface IFolder {\r\n    type: \"folder\";\r\n    name: string; // folder name (without path),\r\n    url: string; // full URL of the resource,\r\n    modified: string; // dcterms:modified date\r\n    mtime: string; // stat:mtime\r\n    size: number;// stat:size\r\n    parent: string;// parentFolder or undef if none,\r\n    content: string; // raw content of the folder's turtle representation,\r\n    files: Array<any>; // an array of files in the folder\r\n    folders: IFolder[];// an array of sub-folders in the folder,\r\n    known?: boolean;//details of sub folders are read (in treeview)\r\n}\r\n\r\nexport default class FileUtils {\r\n\r\n    static async getRoot() {\r\n        const [profile, publicTypeIndex] = await Promise.all([fetchProfile(), fetchPublicTypeIndex()]);\r\n        if (profile === null || publicTypeIndex === null) {\r\n            return null;\r\n        }\r\n\r\n        let root = profile.getRef(space.storage);\r\n        if (typeof root !== 'string') {\r\n            return null;\r\n        }\r\n        \r\n        if (root !== undefined) \r\n            root = root.substring(root.length - 1, root.length) === \"/\" ? root.slice(0, -1) : root\r\n\r\n        return root\r\n    }\r\n    \r\n    static async checkNotesFolder () {\r\n        const notesFolderRef = await this.getRoot() + 'public/notepod';\r\n        FileClient.readFolder(notesFolderRef)\r\n        .then (\r\n            null ,\r\n            FileClient.createFolder(notesFolderRef) \r\n        )\r\n      }\r\n      \r\n    //Interface method for FileClient.readFile\r\n    static async readFileAsString(url: string) {\r\n        url = url.startsWith('http') ? url : 'https://' + url\r\n        let res: string = ''\r\n        await FileClient.readFile(url).then(\r\n            (body: string) => {res = body }\r\n            , (err: any) => {\r\n                console.log(`Error when reading file ${url}, returning blank`)\r\n            });\r\n        return res as string\r\n    }\r\n\r\n}"]},"metadata":{},"sourceType":"module"}