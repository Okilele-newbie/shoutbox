{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\shoutbox\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { rdf, schema } from 'rdf-namespaces';\nimport { createDocument } from 'tripledoc';\nimport { addToTypeIndex } from './addToTypeIndex';\nimport { fetchProfile } from './fetchProfile';\nimport { fetchPublicTypeIndex } from './fetchPublicTypeIndex';\nimport FileUtils from './FileUtils';\nimport MetaUtils from './MetaUtils';\nexport async function addNote(note, notesList) {\n  //TTL file\n  let root = (await FileUtils.getRoot()) || '';\n  const path = \"/public/notepod/note\".concat(Math.floor(Date.now() / 1000), \".ttl\");\n  const notesListRef = \"\".concat(root).concat(path);\n  const newNote = createDocument(notesListRef);\n  const newNoteSubject = newNote.addSubject();\n  newNoteSubject.addRef(rdf.type, schema.TextDigitalDocument);\n  newNoteSubject.addLiteral(schema.text, note);\n  newNoteSubject.addLiteral(schema.dateCreated, new Date(Date.now()));\n  await newNote.save(); //TTL public index\n\n  const _ref = await Promise.all([fetchProfile(), fetchPublicTypeIndex()]),\n        _ref2 = _slicedToArray(_ref, 2),\n        profile = _ref2[0],\n        publicTypeIndex = _ref2[1];\n\n  if (profile !== null && publicTypeIndex !== null) {\n    await addToTypeIndex(publicTypeIndex, newNote, schema.TextDigitalDocument);\n  } //Meta on local and central\n\n\n  MetaUtils.createMeta(notesListRef);\n  notesList.push(newNote);\n  return notesList;\n}\n/*\r\nimport { TripleDocument } from 'tripledoc';\r\nimport { rdf, schema } from 'rdf-namespaces';\r\n\r\nexport async function addNote(note: string, notesList: TripleDocument): Promise<TripleDocument> {\r\n  const newNote = notesList.addSubject();\r\n  newNote.addRef(rdf.type, schema.TextDigitalDocument);\r\n  newNote.addLiteral(schema.text, note);\r\n  newNote.addLiteral(schema.dateCreated, new Date(Date.now()))\r\n\r\n  return await notesList.save([newNote]);\r\n}\r\n*/","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\services\\addNote.ts"],"names":["rdf","schema","createDocument","addToTypeIndex","fetchProfile","fetchPublicTypeIndex","FileUtils","MetaUtils","addNote","note","notesList","root","getRoot","path","Math","floor","Date","now","notesListRef","newNote","newNoteSubject","addSubject","addRef","type","TextDigitalDocument","addLiteral","text","dateCreated","save","Promise","all","profile","publicTypeIndex","createMeta","push"],"mappings":";AAAA,SAASA,GAAT,EAAcC,MAAd,QAA4B,gBAA5B;AAEA,SAASC,cAAT,QAA+B,WAA/B;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,oBAAT,QAAqC,wBAArC;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,SAAP,MAAsB,aAAtB;AAEA,OAAO,eAAeC,OAAf,CAAuBC,IAAvB,EAAqCC,SAArC,EAA6F;AAElG;AACA,MAAIC,IAAI,GAAG,OAAML,SAAS,CAACM,OAAV,EAAN,KAA6B,EAAxC;AACA,QAAMC,IAAI,iCAA0BC,IAAI,CAACC,KAAL,CAAWC,IAAI,CAACC,GAAL,KAAa,IAAxB,CAA1B,SAAV;AACA,QAAMC,YAAY,aAAMP,IAAN,SAAaE,IAAb,CAAlB;AACA,QAAMM,OAAO,GAAGjB,cAAc,CAACgB,YAAD,CAA9B;AACA,QAAME,cAAc,GAAGD,OAAO,CAACE,UAAR,EAAvB;AACAD,EAAAA,cAAc,CAACE,MAAf,CAAsBtB,GAAG,CAACuB,IAA1B,EAAgCtB,MAAM,CAACuB,mBAAvC;AACAJ,EAAAA,cAAc,CAACK,UAAf,CAA0BxB,MAAM,CAACyB,IAAjC,EAAuCjB,IAAvC;AACAW,EAAAA,cAAc,CAACK,UAAf,CAA0BxB,MAAM,CAAC0B,WAAjC,EAA8C,IAAIX,IAAJ,CAASA,IAAI,CAACC,GAAL,EAAT,CAA9C;AACA,QAAME,OAAO,CAACS,IAAR,EAAN,CAXkG,CAalG;;AAbkG,eAc/D,MAAMC,OAAO,CAACC,GAAR,CAAY,CAAC1B,YAAY,EAAb,EAAiBC,oBAAoB,EAArC,CAAZ,CAdyD;AAAA;AAAA,QAc3F0B,OAd2F;AAAA,QAclFC,eAdkF;;AAelG,MAAID,OAAO,KAAK,IAAZ,IAAoBC,eAAe,KAAK,IAA5C,EAAkD;AAChD,UAAM7B,cAAc,CAAC6B,eAAD,EAAkBb,OAAlB,EAA2BlB,MAAM,CAACuB,mBAAlC,CAApB;AACD,GAjBiG,CAmBlG;;;AACAjB,EAAAA,SAAS,CAAC0B,UAAV,CAAqBf,YAArB;AAEAR,EAAAA,SAAS,CAACwB,IAAV,CAAef,OAAf;AACA,SAAOT,SAAP;AACD;AAED","sourcesContent":["import { rdf, schema } from 'rdf-namespaces';\r\nimport { TripleDocument } from 'tripledoc';\r\nimport { createDocument } from 'tripledoc';\r\nimport { addToTypeIndex } from './addToTypeIndex';\r\nimport { fetchProfile } from './fetchProfile';\r\nimport { fetchPublicTypeIndex } from './fetchPublicTypeIndex';\r\nimport FileUtils from './FileUtils';\r\nimport MetaUtils from './MetaUtils'\r\n\r\nexport async function addNote(note: string, notesList: TripleDocument[]): Promise<TripleDocument[]> {\r\n\r\n  //TTL file\r\n  let root = await FileUtils.getRoot() || ''\r\n  const path = `/public/notepod/note${Math.floor(Date.now() / 1000)}.ttl`;\r\n  const notesListRef = `${root}${path}`;\r\n  const newNote = createDocument(notesListRef);\r\n  const newNoteSubject = newNote.addSubject();\r\n  newNoteSubject.addRef(rdf.type, schema.TextDigitalDocument);\r\n  newNoteSubject.addLiteral(schema.text, note);\r\n  newNoteSubject.addLiteral(schema.dateCreated, new Date(Date.now()))\r\n  await newNote.save();\r\n\r\n  //TTL public index\r\n  const [profile, publicTypeIndex] = await Promise.all([fetchProfile(), fetchPublicTypeIndex()]);\r\n  if (profile !== null && publicTypeIndex !== null) {\r\n    await addToTypeIndex(publicTypeIndex, newNote, schema.TextDigitalDocument);\r\n  }\r\n  \r\n  //Meta on local and central\r\n  MetaUtils.createMeta(notesListRef)\r\n\r\n  notesList.push(newNote)\r\n  return notesList\r\n}\r\n\r\n/*\r\nimport { TripleDocument } from 'tripledoc';\r\nimport { rdf, schema } from 'rdf-namespaces';\r\n\r\nexport async function addNote(note: string, notesList: TripleDocument): Promise<TripleDocument> {\r\n  const newNote = notesList.addSubject();\r\n  newNote.addRef(rdf.type, schema.TextDigitalDocument);\r\n  newNote.addLiteral(schema.text, note);\r\n  newNote.addLiteral(schema.dateCreated, new Date(Date.now()))\r\n\r\n  return await notesList.save([newNote]);\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}