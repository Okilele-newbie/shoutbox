{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\shoutbox\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { fetchDocument } from 'tripledoc';\nimport { schema } from 'rdf-namespaces';\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\nimport MetaUtils from '../services/MetaUtils';\nexport function useNotesList() {\n  const publicTypeIndex = usePublicTypeIndex();\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        notesList = _React$useState2[0],\n        setNotesList = _React$useState2[1];\n\n  React.useEffect(() => {\n    async () => {\n      const centralMetas = await MetaUtils.getCentralMetas();\n      let notes = [];\n      centralMetas.map(async item => {\n        const document = await fetchDocument('https://' + item.value.hostName + item.value.pathName);\n        notes.push(document);\n      });\n      setNotesList(notes);\n    };\n  });\n  return notesList;\n}\nexport function getNotes(notesList) {\n  //return notesList.getSubjectsOfType(schema.TextDigitalDocument);\n  let subjectsList = [];\n  notesList.map(note => {\n    subjectsList.push(note.getSubjectsOfType(schema.TextDigitalDocument)[0]);\n  });\n  return subjectsList;\n}\n/*\r\nimport React from 'react';\r\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { solid, schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\nimport { initialiseNotesList } from '../services/initialiseNotesList';\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument>();\r\n\r\n  React.useEffect(() => {\r\n    if (!publicTypeIndex) {\r\n      return;\r\n    }\r\n\r\n    (async () => {\r\n      const notesListIndex = publicTypeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\r\n      if (!notesListIndex) {\r\n        // If no notes document is listed in the public type index, create one:\r\n        const notesList = await initialiseNotesList()\r\n        if (notesList === null) {\r\n          return;\r\n        }\r\n        setNotesList(notesList);\r\n        return;\r\n      } else {\r\n        // If the public type index does list a notes document, fetch it:\r\n        const notesListUrl = notesListIndex.getRef(solid.instance);\r\n        if (typeof notesListUrl !== 'string') {\r\n          return;\r\n        }\r\n        const document = await fetchDocument(notesListUrl);\r\n        setNotesList(document);\r\n      }\r\n    })();\r\n\r\n  }, [publicTypeIndex]);\r\n\r\n  return notesList;\r\n}\r\n\r\nexport function getNotes(notesList: TripleDocument): TripleSubject[] {\r\n  return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n}\r\n*/","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\hooks\\useNotesList.ts"],"names":["React","fetchDocument","schema","usePublicTypeIndex","MetaUtils","useNotesList","publicTypeIndex","useState","notesList","setNotesList","useEffect","centralMetas","getCentralMetas","notes","map","item","document","value","hostName","pathName","push","getNotes","subjectsList","note","getSubjectsOfType","TextDigitalDocument"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA6D,WAA7D;AACA,SAAgBC,MAAhB,QAA8B,gBAA9B;AACA,SAASC,kBAAT,QAAmC,sBAAnC;AACA,OAAOC,SAAP,MAAgC,uBAAhC;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,QAAMC,eAAe,GAAGH,kBAAkB,EAA1C;;AAD6B,0BAEKH,KAAK,CAACO,QAAN,EAFL;AAAA;AAAA,QAEtBC,SAFsB;AAAA,QAEXC,YAFW;;AAI7BT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AAEnB,gBAAY;AACX,YAAMC,YAAY,GAAG,MAAMP,SAAS,CAACQ,eAAV,EAA3B;AACA,UAAIC,KAAK,GAAG,EAAZ;AACAF,MAAAA,YAAY,CAACG,GAAb,CAAiB,MAAOC,IAAP,IAAgB;AAC/B,cAAMC,QAAQ,GAAG,MAAMf,aAAa,CAAC,aAAac,IAAI,CAACE,KAAL,CAAWC,QAAxB,GAAmCH,IAAI,CAACE,KAAL,CAAWE,QAA/C,CAApC;AACAN,QAAAA,KAAK,CAACO,IAAN,CAAWJ,QAAX;AACD,OAHD;AAIAP,MAAAA,YAAY,CAACI,KAAD,CAAZ;AAED,KATD;AAWD,GAbD;AAeA,SAAOL,SAAP;AACD;AAED,OAAO,SAASa,QAAT,CAAkBb,SAAlB,EAAgE;AACrE;AACA,MAAIc,YAAY,GAAG,EAAnB;AACAd,EAAAA,SAAS,CAACM,GAAV,CAAeS,IAAD,IAA0B;AACtCD,IAAAA,YAAY,CAACF,IAAb,CAAkBG,IAAI,CAACC,iBAAL,CAAuBtB,MAAM,CAACuB,mBAA9B,EAAmD,CAAnD,CAAlB;AACD,GAFD;AAGA,SAAOH,YAAP;AACD;AAED","sourcesContent":["import React from 'react';\r\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { solid, schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\nimport MetaUtils, { Meta } from '../services/MetaUtils'\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument[]>();\r\n\r\n  React.useEffect(() => {\r\n\r\n    (async () => {\r\n      const centralMetas = await MetaUtils.getCentralMetas() as any[]\r\n      let notes = [] as TripleDocument[] \r\n      centralMetas.map(async (item) => {\r\n        const document = await fetchDocument('https://' + item.value.hostName + item.value.pathName);\r\n        notes.push(document)\r\n      })\r\n      setNotesList(notes);\r\n\r\n    });\r\n\r\n  });\r\n\r\n  return notesList;\r\n}\r\n\r\nexport function getNotes(notesList: TripleDocument[]): TripleSubject[] {\r\n  //return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n  let subjectsList = [] as TripleSubject[]\r\n  notesList.map((note: TripleDocument) => {\r\n    subjectsList.push(note.getSubjectsOfType(schema.TextDigitalDocument)[0])\r\n  })\r\n  return subjectsList\r\n}\r\n\r\n/*\r\nimport React from 'react';\r\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { solid, schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\nimport { initialiseNotesList } from '../services/initialiseNotesList';\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument>();\r\n\r\n  React.useEffect(() => {\r\n    if (!publicTypeIndex) {\r\n      return;\r\n    }\r\n\r\n    (async () => {\r\n      const notesListIndex = publicTypeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\r\n      if (!notesListIndex) {\r\n        // If no notes document is listed in the public type index, create one:\r\n        const notesList = await initialiseNotesList()\r\n        if (notesList === null) {\r\n          return;\r\n        }\r\n        setNotesList(notesList);\r\n        return;\r\n      } else {\r\n        // If the public type index does list a notes document, fetch it:\r\n        const notesListUrl = notesListIndex.getRef(solid.instance);\r\n        if (typeof notesListUrl !== 'string') {\r\n          return;\r\n        }\r\n        const document = await fetchDocument(notesListUrl);\r\n        setNotesList(document);\r\n      }\r\n    })();\r\n\r\n  }, [publicTypeIndex]);\r\n\r\n  return notesList;\r\n}\r\n\r\nexport function getNotes(notesList: TripleDocument): TripleSubject[] {\r\n  return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n}\r\n*/"]},"metadata":{},"sourceType":"module"}