{"ast":null,"code":"import CouchDb from './CouchDb';\nimport FileUtils from './FileUtils';\n\nconst FileClient = require('solid-file-client');\n\nexport default class MetaUtils {\n  static async getMetaIndexFilePath() {\n    if (this.metaIndexFilePath === undefined) {\n      const root = await FileUtils.getRoot();\n      this.metaIndexFilePath = \"\".concat(root).concat(MetaUtils.tagDir, \"/\").concat(MetaUtils.tagFileName);\n    }\n\n    return this.metaIndexFilePath;\n  }\n\n  static async createMeta(notesListRef) {\n    const url = new URL(notesListRef);\n    let meta = {\n      hostName: url.hostname,\n      pathName: url.pathname,\n      mimeType: 'ttl',\n      creationDate: new Date(),\n      tags: [{\n        tagType: 'AppName',\n        value: 'shoutbox'\n      }]\n    }; //FILE: remove old meta from list if exists and add the new one\n\n    let allLocalMetas = await this.getAllLocalMetas();\n    allLocalMetas = allLocalMetas.filter(el => !(el.hostName === meta.hostName && el.pathName === meta.pathName));\n    allLocalMetas.push(meta);\n    FileClient.updateFile((await this.getMetaIndexFilePath()), JSON.stringify(allLocalMetas)); //COUCHDB:\n\n    CouchDb.writeMeta(meta);\n  } //Local storage, read the file and get all metas in it\n\n\n  static async getAllLocalMetas() {\n    let allMetas = [];\n    var json = await FileUtils.readFileAsString((await this.getMetaIndexFilePath()));\n    allMetas = JSON.parse(json);\n    return allMetas;\n  }\n\n  static async getCentralMetas() {\n    /*\r\n    return new Promise(async (resolve, reject) => {\r\n        await CouchDb.getShoutBoxMetas()\r\n            .then(\r\n                (centralTags: MetaTag[]) => {resolve(centralTags)}\r\n            )\r\n    })\r\n    */\n    return await CouchDb.getShoutBoxMetas();\n  }\n\n}\nMetaUtils.tagDir = '/public';\nMetaUtils.tagFileName = '_Meta7.json';\nMetaUtils.metaIndexFilePath = void 0;","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\services\\MetaUtils.ts"],"names":["CouchDb","FileUtils","FileClient","require","MetaUtils","getMetaIndexFilePath","metaIndexFilePath","undefined","root","getRoot","tagDir","tagFileName","createMeta","notesListRef","url","URL","meta","hostName","hostname","pathName","pathname","mimeType","creationDate","Date","tags","tagType","value","allLocalMetas","getAllLocalMetas","filter","el","push","updateFile","JSON","stringify","writeMeta","allMetas","json","readFileAsString","parse","getCentralMetas","getShoutBoxMetas"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,SAAP,MAAsB,aAAtB;;AACA,MAAMC,UAAU,GAAGC,OAAO,CAAC,mBAAD,CAA1B;;AAiBA,eAAe,MAAMC,SAAN,CAAgB;AAK3B,eAAaC,oBAAb,GAAoC;AAChC,QAAI,KAAKC,iBAAL,KAA2BC,SAA/B,EAA0C;AACtC,YAAMC,IAAI,GAAG,MAAMP,SAAS,CAACQ,OAAV,EAAnB;AACA,WAAKH,iBAAL,aAA4BE,IAA5B,SAAmCJ,SAAS,CAACM,MAA7C,cAAuDN,SAAS,CAACO,WAAjE;AACH;;AACD,WAAO,KAAKL,iBAAZ;AACH;;AAED,eAAaM,UAAb,CAAwBC,YAAxB,EAA8C;AAC1C,UAAMC,GAAG,GAAG,IAAIC,GAAJ,CAAQF,YAAR,CAAZ;AACA,QAAIG,IAAI,GAAG;AACPC,MAAAA,QAAQ,EAAEH,GAAG,CAACI,QADP;AAEPC,MAAAA,QAAQ,EAAEL,GAAG,CAACM,QAFP;AAGPC,MAAAA,QAAQ,EAAE,KAHH;AAIPC,MAAAA,YAAY,EAAE,IAAIC,IAAJ,EAJP;AAKPC,MAAAA,IAAI,EAAE,CACF;AAAEC,QAAAA,OAAO,EAAE,SAAX;AAAsBC,QAAAA,KAAK,EAAE;AAA7B,OADE;AALC,KAAX,CAF0C,CAY1C;;AACA,QAAIC,aAAqB,GAAG,MAAM,KAAKC,gBAAL,EAAlC;AACAD,IAAAA,aAAa,GAAGA,aAAa,CAACE,MAAd,CAAqBC,EAAE,IAAI,EAAEA,EAAE,CAACb,QAAH,KAAgBD,IAAI,CAACC,QAArB,IAAiCa,EAAE,CAACX,QAAH,KAAgBH,IAAI,CAACG,QAAxD,CAA3B,CAAhB;AACAQ,IAAAA,aAAa,CAACI,IAAd,CAAmBf,IAAnB;AACAd,IAAAA,UAAU,CAAC8B,UAAX,EACI,MAAM,KAAK3B,oBAAL,EADV,GAEI4B,IAAI,CAACC,SAAL,CAAeP,aAAf,CAFJ,EAhB0C,CAqB1C;;AACA3B,IAAAA,OAAO,CAACmC,SAAR,CAAkBnB,IAAlB;AACH,GApC0B,CAsC3B;;;AACA,eAAaY,gBAAb,GAAgC;AAC5B,QAAIQ,QAAQ,GAAG,EAAf;AACA,QAAIC,IAAY,GAAG,MAAMpC,SAAS,CAACqC,gBAAV,EAA2B,MAAM,KAAKjC,oBAAL,EAAjC,EAAzB;AACA+B,IAAAA,QAAQ,GAAGH,IAAI,CAACM,KAAL,CAAWF,IAAX,CAAX;AACA,WAAOD,QAAP;AACH;;AAED,eAAaI,eAAb,GAAoD;AAChD;;;;;;;;AAQA,WAAO,MAAMxC,OAAO,CAACyC,gBAAR,EAAb;AAEH;;AAzD0B;AAAVrC,S,CACVM,M,GAAS,S;AADCN,S,CAEVO,W,GAAc,a;AAFJP,S,CAGVE,iB","sourcesContent":["import CouchDb from './CouchDb';\r\nimport FileUtils from './FileUtils';\r\nconst FileClient = require('solid-file-client');\r\n\r\nexport interface MetaTag {\r\n    tagType: string,\r\n    value: string,\r\n    published: boolean\r\n}\r\n\r\nexport interface Meta {\r\n    hostName: string,\r\n    pathName: string,\r\n    mimeType: string,\r\n    creationDate: Date,\r\n    tags: MetaTag[],\r\n    _rev?: string //CouchDb field\r\n}\r\n\r\nexport default class MetaUtils {\r\n    static tagDir = '/public'\r\n    static tagFileName = '_Meta7.json'\r\n    static metaIndexFilePath: string\r\n\r\n    static async getMetaIndexFilePath() {\r\n        if (this.metaIndexFilePath === undefined) {\r\n            const root = await FileUtils.getRoot()\r\n            this.metaIndexFilePath = `${root}${MetaUtils.tagDir}/${MetaUtils.tagFileName}`\r\n        }\r\n        return this.metaIndexFilePath\r\n    }\r\n\r\n    static async createMeta(notesListRef: string) {\r\n        const url = new URL(notesListRef)\r\n        let meta = {\r\n            hostName: url.hostname,\r\n            pathName: url.pathname,\r\n            mimeType: 'ttl',\r\n            creationDate: new Date(),\r\n            tags: [\r\n                { tagType: 'AppName', value: 'shoutbox' },\r\n            ]\r\n        } as Meta\r\n\r\n        //FILE: remove old meta from list if exists and add the new one\r\n        let allLocalMetas: Meta[] = await this.getAllLocalMetas() as unknown as Meta[]\r\n        allLocalMetas = allLocalMetas.filter(el => !(el.hostName === meta.hostName && el.pathName === meta.pathName));\r\n        allLocalMetas.push(meta)\r\n        FileClient.updateFile(\r\n            await this.getMetaIndexFilePath(),\r\n            JSON.stringify(allLocalMetas)\r\n        )\r\n\r\n        //COUCHDB:\r\n        CouchDb.writeMeta(meta)\r\n    }\r\n\r\n    //Local storage, read the file and get all metas in it\r\n    static async getAllLocalMetas() {\r\n        let allMetas = [] as Meta[]\r\n        var json: string = await FileUtils.readFileAsString(await this.getMetaIndexFilePath())\r\n        allMetas = JSON.parse(json)\r\n        return allMetas\r\n    }\r\n\r\n    static async getCentralMetas(): Promise<Array<any>> {\r\n        /*\r\n        return new Promise(async (resolve, reject) => {\r\n            await CouchDb.getShoutBoxMetas()\r\n                .then(\r\n                    (centralTags: MetaTag[]) => {resolve(centralTags)}\r\n                )\r\n        })\r\n*/\r\n        return await CouchDb.getShoutBoxMetas()\r\n\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}