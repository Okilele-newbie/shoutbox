{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\shoutbox\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\shoutbox\\\\src\\\\components\\\\NotesList.tsx\";\nimport React from 'react';\nimport { getNotes, useNotesList } from '../hooks/useNotesList';\nimport { schema } from 'rdf-namespaces';\nimport { Note } from './Note';\nexport const NotesList = () => {\n  const notesList = useNotesList();\n\n  const _React$useState = React.useState(''),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        formContent = _React$useState2[0],\n        setFormContent = _React$useState2[1];\n\n  const _React$useState3 = React.useState(),\n        _React$useState4 = _slicedToArray(_React$useState3, 2),\n        updatedNotesList = _React$useState4[0],\n        setUpdatedNotesList = _React$useState4[1];\n\n  if (!notesList) {\n    return null;\n  }\n\n  const notes = getNotes(updatedNotesList || notesList);\n\n  async function saveNote(event) {\n    /*\r\n    event.preventDefault();\r\n    if (!notesList) {\r\n      return;\r\n    }\r\n    const updatedDoc = await addNote(formContent, notesList);\r\n    setUpdatedNotesList(updatedDoc);\r\n    */\n    setFormContent('');\n  }\n\n  async function editNote(content, note) {\n    //should save individual note and erload/update notesList (as array)\n\n    /*\r\n    const notesDocument = updatedNotesList || notesList;\r\n    if (!notesDocument) {\r\n      return;\r\n    }\r\n      note.setLiteral(schema.text, content);\r\n    note.setLiteral(schema.dateModified, new Date(Date.now()));\r\n    const updatedDoc = await notesDocument.save();\r\n    setUpdatedNotesList(updatedDoc);\r\n    return updatedDoc.getSubject(note.asRef());\r\n    */\n    return note;\n  }\n\n  async function deleteNote(note) {//should save individual note and erload/update notesList (as array)\n\n    /*\r\n      const notesDocument = updatedNotesList || notesList;\r\n    if (!notesDocument) {\r\n      return;\r\n    }\r\n      notesDocument.removeSubject(note.asRef());\r\n    const updatedDoc = await notesDocument.save();\r\n    setUpdatedNotesList(updatedDoc);\r\n    */\n  }\n\n  const noteElements = notes.sort(byDate).map(note => React.createElement(\"div\", {\n    key: note.asRef(),\n    className: \"media\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"media-content\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(Note, {\n    note: note,\n    onChange: updatedContent => editNote(updatedContent, note),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    className: \"has-text-right\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    \"aria-label\": \"Delete this note\",\n    onClick: () => deleteNote(note),\n    title: \"Delete this note\",\n    className: \"button is-text\",\n    style: {\n      textDecoration: 'none'\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71\n    },\n    __self: this\n  }, \"\\uD83D\\uDDD9\")))));\n  return React.createElement(React.Fragment, null, React.createElement(\"section\", {\n    className: \"section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"form\", {\n    onSubmit: saveNote,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"textarea\", {\n    onChange: e => {\n      e.preventDefault();\n      setFormContent(e.target.value);\n    },\n    name: \"note\",\n    id: \"note\",\n    className: \"textarea\",\n    value: formContent,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    className: \"field\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"control\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    type: \"submit\",\n    className: \"button is-primary\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Add note\"))))), React.createElement(\"section\", {\n    className: \"section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, noteElements));\n};\n\nfunction byDate(note1, note2) {\n  const date1 = note1.getDateTime(schema.dateCreated);\n  const date2 = note2.getDateTime(schema.dateCreated);\n\n  if (!(date1 instanceof Date) || !(date2 instanceof Date)) {\n    return 0;\n  }\n\n  return date2.getTime() - date1.getTime();\n}","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\components\\NotesList.tsx"],"names":["React","getNotes","useNotesList","schema","Note","NotesList","notesList","useState","formContent","setFormContent","updatedNotesList","setUpdatedNotesList","notes","saveNote","event","editNote","content","note","deleteNote","noteElements","sort","byDate","map","asRef","updatedContent","textDecoration","e","preventDefault","target","value","note1","note2","date1","getDateTime","dateCreated","date2","Date","getTime"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport { addNote } from '../services/addNote';\r\nimport { getNotes, useNotesList } from '../hooks/useNotesList';\r\nimport { TripleSubject, TripleDocument } from 'tripledoc';\r\nimport { schema } from 'rdf-namespaces';\r\nimport { Note } from './Note';\r\n\r\nexport const NotesList: React.FC = () => {\r\n  const notesList = useNotesList();\r\n  const [formContent, setFormContent] = React.useState('');\r\n  const [updatedNotesList, setUpdatedNotesList] = React.useState<TripleDocument[]>();\r\n\r\n  if (!notesList) {\r\n    return null;\r\n  }\r\n  const notes = getNotes(updatedNotesList || notesList);\r\n\r\n  async function saveNote(event: React.FormEvent) {\r\n    /*\r\n    event.preventDefault();\r\n    if (!notesList) {\r\n      return;\r\n    }\r\n    const updatedDoc = await addNote(formContent, notesList);\r\n    setUpdatedNotesList(updatedDoc);\r\n    */\r\n    setFormContent('');\r\n\r\n  }\r\n\r\n  async function editNote(content: string, note: TripleSubject) {\r\n    //should save individual note and erload/update notesList (as array)\r\n    /*\r\n    const notesDocument = updatedNotesList || notesList;\r\n    if (!notesDocument) {\r\n      return;\r\n    }\r\n\r\n    note.setLiteral(schema.text, content);\r\n    note.setLiteral(schema.dateModified, new Date(Date.now()));\r\n    const updatedDoc = await notesDocument.save();\r\n    setUpdatedNotesList(updatedDoc);\r\n    return updatedDoc.getSubject(note.asRef());\r\n    */\r\n   return note\r\n  }\r\n\r\n  async function deleteNote(note: TripleSubject) {\r\n    //should save individual note and erload/update notesList (as array)\r\n    /*\r\n\r\n    const notesDocument = updatedNotesList || notesList;\r\n    if (!notesDocument) {\r\n      return;\r\n    }\r\n\r\n    notesDocument.removeSubject(note.asRef());\r\n    const updatedDoc = await notesDocument.save();\r\n    setUpdatedNotesList(updatedDoc);\r\n    */\r\n  }\r\n\r\n  const noteElements = notes.sort(byDate).map((note) => (\r\n    <div key={note.asRef()} className=\"media\">\r\n      <div className=\"media-content\">\r\n        <Note\r\n          note={note}\r\n          onChange={(updatedContent) => editNote(updatedContent, note)}\r\n        />\r\n        <p className=\"has-text-right\">\r\n          <button\r\n            aria-label=\"Delete this note\"\r\n            onClick={() => deleteNote(note)}\r\n            title=\"Delete this note\"\r\n            className=\"button is-text\"\r\n            style={{textDecoration: 'none'}}\r\n          >🗙</button>\r\n        </p>\r\n      </div>\r\n    </div>\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <section className=\"section\">\r\n        <form onSubmit={saveNote}>\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <textarea\r\n                onChange={(e) => { e.preventDefault(); setFormContent(e.target.value); }}\r\n                name=\"note\"\r\n                id=\"note\"\r\n                className=\"textarea\"\r\n                value={formContent}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"field\">\r\n            <div className=\"control\">\r\n              <button type=\"submit\" className=\"button is-primary\">Add note</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </section>\r\n      <section className=\"section\">\r\n        {noteElements}\r\n      </section>\r\n    </>\r\n  );\r\n};\r\n\r\nfunction byDate(note1: TripleSubject, note2: TripleSubject): number {\r\n  const date1 = note1.getDateTime(schema.dateCreated);\r\n  const date2 = note2.getDateTime(schema.dateCreated);\r\n  if (!(date1 instanceof Date) || !(date2 instanceof Date)) {\r\n    return 0;\r\n  }\r\n\r\n  return date2.getTime() - date1.getTime();\r\n}\r\n"]},"metadata":{},"sourceType":"module"}