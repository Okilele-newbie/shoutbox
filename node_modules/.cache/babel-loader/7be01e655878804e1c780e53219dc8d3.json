{"ast":null,"code":"/* a light layer on top of solid-cli, giving it persistant \n * sessions and making it conform to the same API as \n * solid-auth-client\n */\n\"use strict\";\n\nlet Rest = require('solid-rest/src/rest.js');\n\nvar rest;\n\nfunction setRestHandlers(handlers) {\n  if (typeof handlers != \"undefined\") {\n    rest = new Rest(handlers);\n    return;\n  }\n\n  if (typeof rest === \"undefined\") {\n    let File = require('solid-rest/src/file.js');\n\n    let Mem = require('solid-rest/src/localStorage.js');\n\n    rest = new Rest([new File(), new Mem()]);\n  }\n}\n\nconst ifetch = require('isomorphic-fetch');\n\nconst SolidClient = require('@solid/cli/src/SolidClient');\n\nconst IdentityManager = require('@solid/cli/src/IdentityManager');\n\nconst fs = require('fs');\n\nconst path = require('path');\n\nexports.name = \"cli\";\nexports.fetch = fetch;\nexports.currentSession = currentSession;\nexports.login = login;\nexports.logout = logout;\nexports.getCredentials = getCredentials; // cjs-end\n\nvar session;\nconst idMan = new IdentityManager();\nconst client = new SolidClient({\n  identityManager: new IdentityManager()\n});\n/*cjs*/\n\nasync function fetch(url, request) {\n  if (url.match(/^(file:|app:)/)) {\n    setRestHandlers();\n    return await rest.fetch(url, request);\n  }\n\n  request = request || {};\n  request.method = request.method || 'GET';\n  request.headers = request.headers || {};\n\n  if (session) {\n    let token = await client.createToken(url, session);\n    request.credentials = \"include\";\n    request.headers.authorization = \"Bearer \".concat(token);\n  }\n\n  return await ifetch(url, request);\n}\n/* \n *  RATHER MINIMAL, BUT FOR NOW THEY\"LL DO\n */\n\n/*cjs*/\n\n\nasync function logout() {\n  session = undefined;\n  return 1;\n}\n/*cjs*/\n\n\nasync function currentSession() {\n  if (session && !client.isExpired(session)) return session;else {\n    return null;\n  }\n}\n/*cjs*/\n\n\nasync function login(cfg) {\n  if (typeof cfg === \"string\") cfg = undefined; // s-a-client compatability \n\n  cfg = cfg || (await getCredentials());\n\n  if (typeof cfg.password === \"undefined\") {\n    throw new Error(\"Couldn't find login config, please specify environment variables SOLID_IDP, SOLID_USERNAME, and SOLID_PASSWORD or see the README for solid-auth-cli for other login options.\");\n  }\n\n  session = await client.login(cfg.idp, {\n    username: cfg.username,\n    password: cfg.password\n  });\n\n  if (session) {\n    session.webId = session.idClaims.sub;\n    return session;\n  } else {\n    throw new Error(\"could not log in\");\n  }\n}\n/*cjs*/\n\n\nasync function getCredentials(fn) {\n  fn = fn || path.join(process.env.HOME, \".solid-auth-cli-config.json\");\n  var creds = {};\n\n  if (fs.existsSync(fn)) {\n    try {\n      creds = fs.readFileSync(fn, 'utf8');\n    } catch (err) {\n      throw new Error(\"read file error \" + err);\n    }\n\n    try {\n      creds = JSON.parse(creds);\n      if (!creds) throw new Error(\"JSON parse error : \" + err);\n    } catch (err) {\n      throw new Error(\"JSON parse error : \" + err);\n    }\n  } else {\n    creds = {\n      idp: process.env.SOLID_IDP,\n      username: process.env.SOLID_USERNAME,\n      password: process.env.SOLID_PASSWORD\n    };\n  }\n\n  return creds;\n}","map":null,"metadata":{},"sourceType":"script"}