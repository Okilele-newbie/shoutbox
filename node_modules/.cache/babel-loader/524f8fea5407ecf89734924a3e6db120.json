{"ast":null,"code":"export default class CouchDb {\n  static async getShoutBoxMetas() {\n    //http://127.0.0.1:5984/solidfilemanager/_design/DesignDoc/_view/MetasByTags?key=\"shoutbox\"\n    const url = \"\".concat(this.couchDbBaseUrl, \"/_design/DesignDoc/_view/MetasByTags?key=\\\"shoutbox\\\"\");\n    return await this.executeQueryonCouch(url);\n  }\n\n  static executeQueryonCouch(url) {\n    return new Promise((resolve, reject) => {\n      const xhr = this.CreateRequest('GET', url);\n\n      if (xhr) {\n        xhr.onload = () => {\n          const response = [];\n\n          if (xhr.status >= 200 && xhr.status < 300) {\n            let res = JSON.parse(xhr.response);\n            resolve(res.rows);\n          } else {\n            console.log(xhr.statusText);\n            reject(xhr.statusText);\n          }\n        };\n\n        xhr.onerror = () => {\n          console.log(xhr.statusText);\n          reject(xhr.statusText);\n        };\n\n        xhr.send();\n      }\n    });\n  }\n\n  static writeMeta(meta) {\n    const xhr = this.CreateRequest('PUT', \"\".concat(this.couchDbBaseUrl, \"/\").concat(this.createIdFromMeta(meta)));\n\n    if (xhr) {\n      // Response handlers.\n      xhr.onload = function () {};\n\n      xhr.onerror = function () {\n        alert('Error writing meta in CouchDb.');\n      };\n\n      xhr.send(JSON.stringify(meta));\n    }\n  } // Create the XHR object.\n\n\n  static CreateRequest(method, url) {\n    let xhr = new XMLHttpRequest();\n\n    if (\"withCredentials\" in xhr) {\n      // XHR for Chrome/Firefox/Opera/Safari.\n      xhr.open(method, url, true); //false to be sync\n\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n    } else {\n      alert('XMLHttpRequest not supported');\n    }\n\n    return xhr;\n  } //Create an id replacing '/' of the URI by dots\n\n\n  static createIdFromMeta(meta) {\n    const reg = new RegExp(\"[/]\", \"g\");\n    return (meta.hostName + meta.pathName).replace(reg, '.');\n  }\n\n}\nCouchDb.couchDbServerUrl = \"http://127.0.0.1:5984\";\nCouchDb.couchDbDatabaseName = \"solidfilemanager\";\nCouchDb.couchDbBaseUrl = \"\".concat(CouchDb.couchDbServerUrl, \"/\").concat(CouchDb.couchDbDatabaseName);","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\services\\CouchDb.ts"],"names":["CouchDb","getShoutBoxMetas","url","couchDbBaseUrl","executeQueryonCouch","Promise","resolve","reject","xhr","CreateRequest","onload","response","status","res","JSON","parse","rows","console","log","statusText","onerror","send","writeMeta","meta","createIdFromMeta","alert","stringify","method","XMLHttpRequest","open","setRequestHeader","reg","RegExp","hostName","pathName","replace","couchDbServerUrl","couchDbDatabaseName"],"mappings":"AAYA,eAAe,MAAMA,OAAN,CAAc;AAM3B,eAAaC,gBAAb,GAAqD;AAChD;AACA,UAAMC,GAAW,aAAM,KAAKC,cAAX,0DAAjB;AACA,WAAO,MAAM,KAAKC,mBAAL,CAAyBF,GAAzB,CAAb;AACH;;AAEF,SAAOE,mBAAP,CAA2BF,GAA3B,EAA6D;AAC3D,WAAO,IAAIG,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,YAAMC,GAAG,GAAG,KAAKC,aAAL,CAAmB,KAAnB,EAA0BP,GAA1B,CAAZ;;AACA,UAAIM,GAAJ,EAAS;AACPA,QAAAA,GAAG,CAACE,MAAJ,GAAa,MAAM;AACjB,gBAAMC,QAAQ,GAAG,EAAjB;;AACA,cAAIH,GAAG,CAACI,MAAJ,IAAc,GAAd,IAAqBJ,GAAG,CAACI,MAAJ,GAAa,GAAtC,EAA2C;AACzC,gBAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWP,GAAG,CAACG,QAAf,CAAV;AACAL,YAAAA,OAAO,CAACO,GAAG,CAACG,IAAL,CAAP;AACD,WAHD,MAGO;AACLC,YAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACW,UAAhB;AACAZ,YAAAA,MAAM,CAACC,GAAG,CAACW,UAAL,CAAN;AACD;AACF,SATD;;AAUAX,QAAAA,GAAG,CAACY,OAAJ,GAAc,MAAM;AAClBH,UAAAA,OAAO,CAACC,GAAR,CAAYV,GAAG,CAACW,UAAhB;AACAZ,UAAAA,MAAM,CAACC,GAAG,CAACW,UAAL,CAAN;AACD,SAHD;;AAIAX,QAAAA,GAAG,CAACa,IAAJ;AACD;AACF,KAnBM,CAAP;AAoBD;;AAED,SAAOC,SAAP,CAAiBC,IAAjB,EAA6B;AAC3B,UAAMf,GAAG,GAAG,KAAKC,aAAL,CAAmB,KAAnB,YAA6B,KAAKN,cAAlC,cAAoD,KAAKqB,gBAAL,CAAsBD,IAAtB,CAApD,EAAZ;;AACA,QAAIf,GAAJ,EAAS;AACP;AACAA,MAAAA,GAAG,CAACE,MAAJ,GAAa,YAAY,CAAG,CAA5B;;AACAF,MAAAA,GAAG,CAACY,OAAJ,GAAc,YAAY;AACxBK,QAAAA,KAAK,CAAC,gCAAD,CAAL;AACD,OAFD;;AAGAjB,MAAAA,GAAG,CAACa,IAAJ,CAASP,IAAI,CAACY,SAAL,CAAeH,IAAf,CAAT;AACD;AACF,GA7C0B,CA+C3B;;;AACA,SAAOd,aAAP,CAAqBkB,MAArB,EAAqCzB,GAArC,EAAkD;AAChD,QAAIM,GAAG,GAAG,IAAIoB,cAAJ,EAAV;;AAEA,QAAI,qBAAqBpB,GAAzB,EAA8B;AAC5B;AACAA,MAAAA,GAAG,CAACqB,IAAJ,CAASF,MAAT,EAAiBzB,GAAjB,EAAsB,IAAtB,EAF4B,CAEC;;AAC7BM,MAAAA,GAAG,CAACsB,gBAAJ,CAAqB,cAArB,EAAqC,kBAArC;AACD,KAJD,MAIO;AACLL,MAAAA,KAAK,CAAC,8BAAD,CAAL;AACD;;AACD,WAAOjB,GAAP;AACD,GA3D0B,CA6D3B;;;AACA,SAAOgB,gBAAP,CAAwBD,IAAxB,EAAoC;AAClC,UAAMQ,GAAG,GAAG,IAAIC,MAAJ,CAAW,KAAX,EAAkB,GAAlB,CAAZ;AACA,WAAO,CAACT,IAAI,CAACU,QAAL,GAAgBV,IAAI,CAACW,QAAtB,EAAgCC,OAAhC,CAAwCJ,GAAxC,EAA6C,GAA7C,CAAP;AACD;;AAjE0B;AAAR/B,O,CAEZoC,gB;AAFYpC,O,CAGZqC,mB;AAHYrC,O,CAIZG,c,aAAoBH,OAAO,CAACoC,gB,cAAoBpC,OAAO,CAACqC,mB","sourcesContent":["import { Meta} from './MetaUtils';\r\n\r\ninterface CouchDbRowKeyValue {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\nexport interface FoundTags {\r\n  key: string,\r\n  value: string\r\n}\r\n\r\nexport default class CouchDb {\r\n\r\n  static couchDbServerUrl = `http://127.0.0.1:5984`\r\n  static couchDbDatabaseName = `solidfilemanager`\r\n  static couchDbBaseUrl = `${CouchDb.couchDbServerUrl}/${CouchDb.couchDbDatabaseName}`\r\n\r\n  static async getShoutBoxMetas(): Promise<Array<any>> {\r\n       //http://127.0.0.1:5984/solidfilemanager/_design/DesignDoc/_view/MetasByTags?key=\"shoutbox\"\r\n       const url: string = `${this.couchDbBaseUrl}/_design/DesignDoc/_view/MetasByTags?key=\"shoutbox\"`\r\n       return await this.executeQueryonCouch(url)\r\n   }\r\n\r\n  static executeQueryonCouch(url: string): Promise<Array<any>> {\r\n    return new Promise((resolve, reject) => {\r\n      const xhr = this.CreateRequest('GET', url);\r\n      if (xhr) {\r\n        xhr.onload = () => {\r\n          const response = [] as any[]\r\n          if (xhr.status >= 200 && xhr.status < 300) {\r\n            let res = JSON.parse(xhr.response)\r\n            resolve(res.rows)\r\n          } else {\r\n            console.log(xhr.statusText)\r\n            reject(xhr.statusText);\r\n          }\r\n        };\r\n        xhr.onerror = () => {\r\n          console.log(xhr.statusText)\r\n          reject(xhr.statusText);\r\n        }\r\n        xhr.send();\r\n      }\r\n    })\r\n  }\r\n\r\n  static writeMeta(meta: Meta) {\r\n    const xhr = this.CreateRequest('PUT', `${this.couchDbBaseUrl}/${this.createIdFromMeta(meta)}`);\r\n    if (xhr) {\r\n      // Response handlers.\r\n      xhr.onload = function () { };\r\n      xhr.onerror = function () {\r\n        alert('Error writing meta in CouchDb.');\r\n      };\r\n      xhr.send(JSON.stringify(meta));\r\n    }\r\n  }\r\n\r\n  // Create the XHR object.\r\n  static CreateRequest(method: string, url: string) {\r\n    let xhr = new XMLHttpRequest();\r\n\r\n    if (\"withCredentials\" in xhr) {\r\n      // XHR for Chrome/Firefox/Opera/Safari.\r\n      xhr.open(method, url, true); //false to be sync\r\n      xhr.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    } else {\r\n      alert('XMLHttpRequest not supported');\r\n    }\r\n    return xhr;\r\n  }\r\n\r\n  //Create an id replacing '/' of the URI by dots\r\n  static createIdFromMeta(meta: Meta) {\r\n    const reg = new RegExp(\"[/]\", \"g\")\r\n    return (meta.hostName + meta.pathName).replace(reg, '.')\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}