{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\shoutbox\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { fetchDocument } from 'tripledoc';\nimport { solid, schema } from 'rdf-namespaces';\nimport { usePublicTypeIndex } from './usePublicTypeIndex'; //import { initialiseNotesList } from '../services/initialiseNotesList';\n\nexport function useNotesList() {\n  const publicTypeIndex = usePublicTypeIndex();\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        notesList = _React$useState2[0],\n        setNotesList = _React$useState2[1];\n\n  React.useEffect(() => {\n    if (!publicTypeIndex) {\n      return;\n    }\n\n    (async () => {\n      const notesListIndex = publicTypeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\n\n      if (!notesListIndex) {\n        // If no notes document is listed in the public type index, create one:\n        //const notesList = await initialiseNotesList()\n        //if (notesList === null) {\n        //  return;\n        //}\n        //setNotesList(notesList);\n        return;\n      } else {\n        // If the public type index does list a notes document, fetch it:\n        const notesListUrl = notesListIndex.getRef(solid.instance);\n\n        if (typeof notesListUrl !== 'string') {\n          return;\n        }\n\n        const document = await fetchDocument(notesListUrl);\n        setNotesList(document);\n      }\n    })();\n  }, [publicTypeIndex]);\n  return notesList;\n}\nexport function getNotes(notesList) {\n  return notesList.getSubjectsOfType(schema.TextDigitalDocument);\n}\n/*\r\nimport React from 'react';\r\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { solid, schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\nimport MetaUtils, { Meta } from '../services/MetaUtils'\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument[]>();\r\n\r\n  React.useEffect(() => {\r\n\r\n    (async () => {\r\n      const centralMetas = await MetaUtils.getCentralMetas() as any[]\r\n      let notes = [] as TripleDocument[] \r\n      centralMetas.map(async (item) => {\r\n        const document = await fetchDocument('https://' + item.value.hostName + item.value.pathName);\r\n        notes.push(document)\r\n      })\r\n      setNotesList(notes);\r\n\r\n    })();\r\n\r\n  });\r\n\r\n  return notesList;\r\n}\r\n\r\nexport function getNotes(notesList: TripleDocument[]): TripleSubject[] {\r\n  //return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n  let subjectsList = [] as TripleSubject[]\r\n  notesList.map((note: TripleDocument) => {\r\n    subjectsList.push(note.getSubjectsOfType(schema.TextDigitalDocument)[0])\r\n  })\r\n  return subjectsList\r\n}\r\n*/","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\hooks\\useNotesList.ts"],"names":["React","fetchDocument","solid","schema","usePublicTypeIndex","useNotesList","publicTypeIndex","useState","notesList","setNotesList","useEffect","notesListIndex","findSubject","forClass","TextDigitalDocument","notesListUrl","getRef","instance","document","getNotes","getSubjectsOfType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA6D,WAA7D;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,gBAA9B;AACA,SAASC,kBAAT,QAAmC,sBAAnC,C,CACA;;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,QAAMC,eAAe,GAAGF,kBAAkB,EAA1C;;AAD6B,0BAEKJ,KAAK,CAACO,QAAN,EAFL;AAAA;AAAA,QAEtBC,SAFsB;AAAA,QAEXC,YAFW;;AAI7BT,EAAAA,KAAK,CAACU,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACJ,eAAL,EAAsB;AACpB;AACD;;AAED,KAAC,YAAY;AACX,YAAMK,cAAc,GAAGL,eAAe,CAACM,WAAhB,CAA4BV,KAAK,CAACW,QAAlC,EAA4CV,MAAM,CAACW,mBAAnD,CAAvB;;AACA,UAAI,CAACH,cAAL,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OARD,MAQO;AACL;AACA,cAAMI,YAAY,GAAGJ,cAAc,CAACK,MAAf,CAAsBd,KAAK,CAACe,QAA5B,CAArB;;AACA,YAAI,OAAOF,YAAP,KAAwB,QAA5B,EAAsC;AACpC;AACD;;AACD,cAAMG,QAAQ,GAAG,MAAMjB,aAAa,CAACc,YAAD,CAApC;AACAN,QAAAA,YAAY,CAACS,QAAD,CAAZ;AACD;AACF,KAnBD;AAqBD,GA1BD,EA0BG,CAACZ,eAAD,CA1BH;AA4BA,SAAOE,SAAP;AACD;AAED,OAAO,SAASW,QAAT,CAAkBX,SAAlB,EAA8D;AACnE,SAAOA,SAAS,CAACY,iBAAV,CAA4BjB,MAAM,CAACW,mBAAnC,CAAP;AACD;AAGD","sourcesContent":["import React from 'react';\r\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { solid, schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\n//import { initialiseNotesList } from '../services/initialiseNotesList';\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument>();\r\n\r\n  React.useEffect(() => {\r\n    if (!publicTypeIndex) {\r\n      return;\r\n    }\r\n\r\n    (async () => {\r\n      const notesListIndex = publicTypeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\r\n      if (!notesListIndex) {\r\n        // If no notes document is listed in the public type index, create one:\r\n        //const notesList = await initialiseNotesList()\r\n        //if (notesList === null) {\r\n        //  return;\r\n        //}\r\n        //setNotesList(notesList);\r\n        return;\r\n      } else {\r\n        // If the public type index does list a notes document, fetch it:\r\n        const notesListUrl = notesListIndex.getRef(solid.instance);\r\n        if (typeof notesListUrl !== 'string') {\r\n          return;\r\n        }\r\n        const document = await fetchDocument(notesListUrl);\r\n        setNotesList(document);\r\n      }\r\n    })();\r\n\r\n  }, [publicTypeIndex]);\r\n\r\n  return notesList;\r\n}\r\n\r\nexport function getNotes(notesList: TripleDocument): TripleSubject[] {\r\n  return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n}\r\n\r\n\r\n/*\r\nimport React from 'react';\r\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { solid, schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\nimport MetaUtils, { Meta } from '../services/MetaUtils'\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument[]>();\r\n\r\n  React.useEffect(() => {\r\n\r\n    (async () => {\r\n      const centralMetas = await MetaUtils.getCentralMetas() as any[]\r\n      let notes = [] as TripleDocument[] \r\n      centralMetas.map(async (item) => {\r\n        const document = await fetchDocument('https://' + item.value.hostName + item.value.pathName);\r\n        notes.push(document)\r\n      })\r\n      setNotesList(notes);\r\n\r\n    })();\r\n\r\n  });\r\n\r\n  return notesList;\r\n}\r\n\r\nexport function getNotes(notesList: TripleDocument[]): TripleSubject[] {\r\n  //return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n  let subjectsList = [] as TripleSubject[]\r\n  notesList.map((note: TripleDocument) => {\r\n    subjectsList.push(note.getSubjectsOfType(schema.TextDigitalDocument)[0])\r\n  })\r\n  return subjectsList\r\n}\r\n*/\r\n"]},"metadata":{},"sourceType":"module"}