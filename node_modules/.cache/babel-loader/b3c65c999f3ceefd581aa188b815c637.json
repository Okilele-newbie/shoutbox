{"ast":null,"code":"/**\n * Local dependencies\n */\nconst Algorithm = require('../dictionaries/Algorithm');\n\nconst KeyAlgorithm = require('../dictionaries/KeyAlgorithm');\n\nconst RegisteredAlgorithms = require('./RegisteredAlgorithms');\n\nconst _require = require('../errors'),\n      NotSupportedError = _require.NotSupportedError;\n/**\n * Supported Operations\n */\n\n\nconst operations = ['encrypt', 'decrypt', 'sign', 'verify', 'deriveBits', 'digest', // THIS WASN'T IN THE LIST. PROBABLY GETTING SOMETHING WRONG HERE\n'wrapKey', 'unwrapKey', 'generateKey', 'importKey', 'exportKey', 'getLength'];\n/**\n * SupportedAlgorithms\n */\n\nclass SupportedAlgorithms {\n  /**\n   * Constructor\n   */\n  constructor() {\n    operations.forEach(op => {\n      this[op] = new RegisteredAlgorithms();\n    });\n  }\n  /**\n   * Supported Operations\n   */\n\n\n  static get operations() {\n    return operations;\n  }\n  /**\n   * Define Algorithm\n   */\n\n\n  define(alg, op, type) {\n    let registeredAlgorithms = this[op];\n    registeredAlgorithms[alg] = type;\n  }\n  /**\n   * Normalize\n   */\n\n\n  normalize(op, alg) {\n    if (typeof alg === 'string') {\n      return this.normalize(op, new KeyAlgorithm({\n        name: alg\n      }));\n    }\n\n    if (typeof alg === 'object') {\n      let registeredAlgorithms = this[op];\n      let initialAlg;\n\n      try {\n        initialAlg = new Algorithm(alg);\n      } catch (error) {\n        return error;\n      }\n\n      let algName = initialAlg.name;\n      algName = registeredAlgorithms.getCaseInsensitive(algName);\n\n      if (algName === undefined) {\n        return new NotSupportedError(alg.name);\n      }\n\n      let desiredType, normalizedAlgorithm;\n\n      try {\n        desiredType = require(registeredAlgorithms[algName]);\n        normalizedAlgorithm = new desiredType(alg);\n        normalizedAlgorithm.name = algName;\n      } catch (error) {\n        return error;\n      }\n\n      let dictionaries = desiredType.dictionaries;\n\n      for (let i = 0; i < dictionaries.length; i++) {\n        let dictionary = dictionaries[i];\n        let members = dictionary.members;\n\n        for (let key in members) {\n          let member = members[key];\n          let idlValue = normalizedAlgorithm[key];\n\n          try {\n            if (member === 'BufferSource' && idlValue !== undefined) {\n              normalizedAlgorithm[key] = idlValue.slice();\n            }\n\n            if (member === 'HashAlgorithmIdentifier') {\n              let hashAlgorithm = this.normalize('digest', idlValue);\n\n              if (hashAlgorithm instanceof Error) {\n                return hashAlgorithm;\n              }\n\n              normalizedAlgorithm[key] = hashAlgorithm;\n            }\n\n            if (member === 'AlgorithmIdentifier') {\n              normalizedAlgorithm[key] = this.normalize(WTF, idlValue);\n            }\n          } catch (error) {\n            return error;\n          }\n        }\n      }\n\n      return normalizedAlgorithm;\n    }\n  }\n\n}\n/**\n * Export\n */\n\n\nmodule.exports = SupportedAlgorithms;","map":null,"metadata":{},"sourceType":"script"}