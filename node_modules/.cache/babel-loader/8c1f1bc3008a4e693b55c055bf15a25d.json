{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\admin\\\\Documents\\\\GitHub\\\\shoutbox\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport React from 'react';\nimport { fetchDocument } from 'tripledoc';\nimport { solid, schema } from 'rdf-namespaces';\nimport { usePublicTypeIndex } from './usePublicTypeIndex'; //import { initialiseNotesList } from '../services/initialiseNotesList';\n\nimport MetaUtils from '../services/MetaUtils';\nexport function useNotesList() {\n  const publicTypeIndex = usePublicTypeIndex();\n\n  const _React$useState = React.useState(),\n        _React$useState2 = _slicedToArray(_React$useState, 2),\n        notesList = _React$useState2[0],\n        setNotesList = _React$useState2[1];\n\n  React.useEffect(() => {\n    if (!publicTypeIndex) {\n      return;\n    }\n\n    (async () => {\n      const notesListIndex = publicTypeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\n\n      if (!notesListIndex) {\n        // If no notes document is listed in the public type index, create one:\n        //const notesList = await initialiseNotesList()\n        //if (notesList === null) {\n        //  return;\n        //}\n        //setNotesList(notesList);\n        return;\n      } else {\n        // ======================\n        const centralMetas = await MetaUtils.getCentralMetas();\n        let notes = [];\n\n        for (let i = 0; i < centralMetas.length; i++) {\n          const document = await fetchDocument('https://' + centralMetas[i].value.hostName + centralMetas[i].value.pathName);\n          notes.push(document);\n        }\n\n        setNotesList(notes); //======================\n        // If the public type index does list a notes document, fetch it:\n\n        /*\r\n        const notesListUrl = notesListIndex.getRef(solid.instance);\r\n        if (typeof notesListUrl !== 'string') {\r\n          return;\r\n        }\r\n        const document = await fetchDocument(notesListUrl);\r\n        setNotesList(document);\r\n        */\n      }\n    })();\n  }, [publicTypeIndex]);\n  return notesList;\n}\n/*\r\nexport function getNotes(notesList: TripleDocument): TripleSubject[] {\r\n  return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n}\r\n*/\n\nexport function getNotes(notesList) {\n  //return notesList.getSubjectsOfType(schema.TextDigitalDocument);\n  let subjectsList = [];\n  notesList.map(note => {\n    subjectsList.push(note.getSubjectsOfType(schema.TextDigitalDocument)[0]);\n  });\n  return subjectsList;\n}","map":{"version":3,"sources":["C:\\Users\\admin\\Documents\\GitHub\\shoutbox\\src\\hooks\\useNotesList.ts"],"names":["React","fetchDocument","solid","schema","usePublicTypeIndex","MetaUtils","useNotesList","publicTypeIndex","useState","notesList","setNotesList","useEffect","notesListIndex","findSubject","forClass","TextDigitalDocument","centralMetas","getCentralMetas","notes","i","length","document","value","hostName","pathName","push","getNotes","subjectsList","map","note","getSubjectsOfType"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,aAAT,QAA6D,WAA7D;AACA,SAASC,KAAT,EAAgBC,MAAhB,QAA8B,gBAA9B;AACA,SAASC,kBAAT,QAAmC,sBAAnC,C,CACA;;AACA,OAAOC,SAAP,MAAgC,uBAAhC;AAEA,OAAO,SAASC,YAAT,GAAwB;AAC7B,QAAMC,eAAe,GAAGH,kBAAkB,EAA1C;;AAD6B,0BAEKJ,KAAK,CAACQ,QAAN,EAFL;AAAA;AAAA,QAEtBC,SAFsB;AAAA,QAEXC,YAFW;;AAI7BV,EAAAA,KAAK,CAACW,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACJ,eAAL,EAAsB;AACpB;AACD;;AAED,KAAC,YAAY;AACX,YAAMK,cAAc,GAAGL,eAAe,CAACM,WAAhB,CAA4BX,KAAK,CAACY,QAAlC,EAA4CX,MAAM,CAACY,mBAAnD,CAAvB;;AACA,UAAI,CAACH,cAAL,EAAqB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACD,OARD,MAQO;AAEL;AACA,cAAMI,YAAY,GAAG,MAAMX,SAAS,CAACY,eAAV,EAA3B;AACA,YAAIC,KAAK,GAAG,EAAZ;;AACA,aAAM,IAAIC,CAAC,GAAG,CAAd,EAAiBA,CAAC,GAAGH,YAAY,CAACI,MAAlC,EAA2CD,CAAC,EAA5C,EAAgD;AAC9C,gBAAME,QAAQ,GAAG,MAAMpB,aAAa,CAAC,aAAae,YAAY,CAACG,CAAD,CAAZ,CAAgBG,KAAhB,CAAsBC,QAAnC,GAA8CP,YAAY,CAACG,CAAD,CAAZ,CAAgBG,KAAhB,CAAsBE,QAArE,CAApC;AACAN,UAAAA,KAAK,CAACO,IAAN,CAAWJ,QAAX;AACD;;AACDX,QAAAA,YAAY,CAACQ,KAAD,CAAZ,CATK,CAUL;AACA;;AACA;;;;;;;;AAQD;AACF,KA/BD;AAiCD,GAtCD,EAsCG,CAACX,eAAD,CAtCH;AAwCA,SAAOE,SAAP;AACD;AACD;;;;;;AAKA,OAAO,SAASiB,QAAT,CAAkBjB,SAAlB,EAAgE;AACrE;AACA,MAAIkB,YAAY,GAAG,EAAnB;AACAlB,EAAAA,SAAS,CAACmB,GAAV,CAAeC,IAAD,IAA0B;AACtCF,IAAAA,YAAY,CAACF,IAAb,CAAkBI,IAAI,CAACC,iBAAL,CAAuB3B,MAAM,CAACY,mBAA9B,EAAmD,CAAnD,CAAlB;AACD,GAFD;AAGA,SAAOY,YAAP;AACD","sourcesContent":["import React from 'react';\r\nimport { fetchDocument, TripleDocument, TripleSubject } from 'tripledoc';\r\nimport { solid, schema } from 'rdf-namespaces';\r\nimport { usePublicTypeIndex } from './usePublicTypeIndex';\r\n//import { initialiseNotesList } from '../services/initialiseNotesList';\r\nimport MetaUtils, { Meta } from '../services/MetaUtils'\r\n\r\nexport function useNotesList() {\r\n  const publicTypeIndex = usePublicTypeIndex();\r\n  const [notesList, setNotesList] = React.useState<TripleDocument[]>();\r\n\r\n  React.useEffect(() => {\r\n    if (!publicTypeIndex) {\r\n      return;\r\n    }\r\n\r\n    (async () => {\r\n      const notesListIndex = publicTypeIndex.findSubject(solid.forClass, schema.TextDigitalDocument);\r\n      if (!notesListIndex) {\r\n        // If no notes document is listed in the public type index, create one:\r\n        //const notesList = await initialiseNotesList()\r\n        //if (notesList === null) {\r\n        //  return;\r\n        //}\r\n        //setNotesList(notesList);\r\n        return;\r\n      } else {\r\n\r\n        // ======================\r\n        const centralMetas = await MetaUtils.getCentralMetas() as any[]\r\n        let notes = [] as TripleDocument[] \r\n        for ( let i = 0; i < centralMetas.length ; i++) {\r\n          const document = await fetchDocument('https://' + centralMetas[i].value.hostName + centralMetas[i].value.pathName);\r\n          notes.push(document)\r\n        }\r\n        setNotesList(notes);\r\n        //======================\r\n        // If the public type index does list a notes document, fetch it:\r\n        /*\r\n        const notesListUrl = notesListIndex.getRef(solid.instance);\r\n        if (typeof notesListUrl !== 'string') {\r\n          return;\r\n        }\r\n        const document = await fetchDocument(notesListUrl);\r\n        setNotesList(document);\r\n        */\r\n      }\r\n    })();\r\n\r\n  }, [publicTypeIndex]);\r\n\r\n  return notesList;\r\n}\r\n/*\r\nexport function getNotes(notesList: TripleDocument): TripleSubject[] {\r\n  return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n}\r\n*/\r\nexport function getNotes(notesList: TripleDocument[]): TripleSubject[] {\r\n  //return notesList.getSubjectsOfType(schema.TextDigitalDocument);\r\n  let subjectsList = [] as TripleSubject[]\r\n  notesList.map((note: TripleDocument) => {\r\n    subjectsList.push(note.getSubjectsOfType(schema.TextDigitalDocument)[0])\r\n  })\r\n  return subjectsList\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}